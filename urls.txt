https://www.geepawhill.org/2017/07/15/making-complex-changes/
https://www.geepawhill.org/2017/09/23/avoid-changing-code-should-be-avoided/
https://www.geepawhill.org/2017/09/23/endpointing-vs-next-stepping/
https://www.geepawhill.org/2018/08/02/decomposition-rage-tweet-explained/
https://www.geepawhill.org/2020/04/08/iterative-change-what-and-why/
https://www.geepawhill.org/2020/05/29/steps-value-and-change-harvesting/
https://www.geepawhill.org/2020/06/26/more-on-small-steps/
https://www.geepawhill.org/2020/06/30/the-right-step/
https://www.geepawhill.org/2020/07/17/the-rat-rework-avoidance-theory/
https://www.geepawhill.org/2020/07/21/understanding-incremental-switchover/
https://www.geepawhill.org/2020/08/12/embrace-change-modern-geekery-practices/
https://www.geepawhill.org/2020/08/14/pathing-a-style-of-laying-out-work/
https://www.geepawhill.org/2020/08/18/iterative-user-value/
https://www.geepawhill.org/2020/08/25/iterative-user-value-in-flows/
https://www.geepawhill.org/2020/08/28/change-harvesting-vs-rework-avoidance/
https://www.geepawhill.org/2020/09/01/cht-style-implementation/
https://www.geepawhill.org/2020/09/08/cht-means-different-design-imperatives/
https://www.geepawhill.org/2020/09/11/the-cost-of-rework-avoidance-theory/
https://www.geepawhill.org/2020/11/24/change-harvesters-iterate-change/
https://www.geepawhill.org/2021/01/22/why-have-a-change-strategy/
https://www.geepawhill.org/2021/04/07/rice-garlic-more-smaller-steps/
https://www.geepawhill.org/2021/05/18/big-batch-releases/
https://www.geepawhill.org/2021/05/25/path-focused-design/
